===== 2048 게임 함수 분석 문서 =====

===========================================
1. initBoard() 함수 - initBoard_1313.c
===========================================
[함수 인자값] 
- 없음

[함수 리턴값] 
- 없음 (void)

[변수] 
- i: int형, 0~SIZE-1 (0~3)
- j: int형, 0~SIZE-1 (0~3)

[제어문] 
- 없음

[반복문] 
- for문 2개 (중첩): 2차원 배열 초기화용
  - 외부 for문: i = 0; i < SIZE; i++
  - 내부 for문: j = 0; j < SIZE; j++

===========================================
2. generateTile() 함수 - generateTile_1310.c
===========================================
[함수 인자값] 
- 없음

[함수 리턴값] 
- 없음 (void)

[변수] 
- emptyTiles: int형 2차원 배열, [SIZE*SIZE][2] (최대 16x2)
- emptyCount: int형, 0~16
- i: int형, 0~SIZE-1 (0~3)
- j: int형, 0~SIZE-1 (0~3)
- randomIndex: int형, 0~emptyCount-1
- x: int형, 0~SIZE-1 (0~3)
- y: int형, 0~SIZE-1 (0~3)
- tileValue: int형, 2 또는 4

[제어문] 
- if문 3개
  - if (board[i][j] == 0): 빈 칸 확인
  - if (emptyCount == 0): 빈 칸 없을 때 조기 반환
  - 삼항 연산자: (rand() % 10 == 0) ? 4 : 2

[반복문] 
- for문 2개 (중첩): 빈 칸 찾기용
  - 외부 for문: i = 0; i < SIZE; i++
  - 내부 for문: j = 0; j < SIZE; j++

===========================================
3. moveTiles() 함수 - moveTiles_1315.c
===========================================
[함수 인자값] 
- direction: char형, 'w', 'a', 's', 'd' 중 하나

[함수 리턴값] 
- moved: bool형, true(이동 성공) 또는 false(이동 실패)

[변수] 
- backup: int형 2차원 배열, [SIZE][SIZE]
- moved: bool형, true 또는 false
- i: int형, 0~SIZE-1 (0~3)
- j: int형, 0~SIZE-1 (0~3)
- line: int형 배열, [SIZE]

[제어문] 
- switch문 1개: direction에 따른 분기
- if문 2개: 
  - moved 체크를 위한 보드 비교 (기존 isDifferent 로직 통합)
  - if (moved): generateTile() 호출 여부 결정

[반복문] 
- for문 5개
  - 백업 생성용 for문 2개 (중첩): i = 0; i < SIZE; i++, j = 0; j < SIZE; j++
  - 처리용 for문: i = 0; i < SIZE; i++ (각 행/열 처리)
  - switch 내부의 각 case마다 for문 2개씩 (총 8개 추가)
  - 보드 변경 확인용 for문 2개 (중첩): i = 0; i < SIZE; i++, j = 0; j < SIZE; j++

===========================================
4. mergeTiles() 함수 - mergeTiles_1308.c
===========================================
[함수 인자값] 
- line: int형 배열, [SIZE] (0~2048 범위의 값들)

[함수 리턴값] 
- 없음 (void)

[변수] 
- temp: int형 배열, [SIZE] 초기값 0
- final: int형 배열, [SIZE] 초기값 0
- idx: int형, 0~SIZE-1 (0~3)
- i: int형, 0~SIZE-1 (0~3)

[제어문] 
- if문 3개
  - if (line[i] != 0): 0이 아닌 값 확인
  - if (temp[i] != 0 && temp[i] == temp[i + 1]): 병합 가능 확인
  - if (temp[i] != 0): 최종 배열 구성시 0이 아닌 값 확인

[반복문] 
- for문 3개
  - 1단계: for (i = 0; i < SIZE; i++) - 0이 아닌 값들을 왼쪽으로 이동
  - 2단계: for (i = 0; i < SIZE - 1; i++) - 인접한 같은 값들 병합
  - 3단계: for (i = 0; i < SIZE; i++) - 병합 후 다시 왼쪽으로 정렬
- 추가 for문 1개: 결과를 원본 배열에 복사

===========================================
5. checkGameOver() 함수 - checkGameOver_1310.c
===========================================
[함수 인자값] 
- 없음

[함수 리턴값] 
- bool형, true(게임 종료) 또는 false(게임 계속)

[변수] 
- i: int형, 0~SIZE-1 (0~3)
- j: int형, 0~SIZE-1 (0~3)

[제어문] 
- if문 6개
  - if (board[i][j] == 2048): 승리 조건 확인
  - if (board[i][j] == 0): 빈 칸 존재 확인
  - if (j < SIZE - 1 && board[i][j] == board[i][j + 1]): 가로 병합 가능 확인
  - if (i < SIZE - 1 && board[i][j] == board[i + 1][j]): 세로 병합 가능 확인

[반복문] 
- for문 6개 (3쌍의 중첩 for문)
  - 1쌍: 2048 타일 확인용
  - 2쌍: 빈 칸 확인용  
  - 3쌍: 병합 가능한 타일 확인용

===========================================
6. printBoard() 함수 - printboard_1308.c
===========================================
[함수 인자값] 
- 없음

[함수 리턴값] 
- 없음 (void)

[변수] 
- i: int형, 0~SIZE-1 (0~3)
- j: int형, 0~SIZE-1 (0~3)

[제어문] 
- if문 2개
  - if (board[i][j] == 0): 빈 칸 출력 처리
  - if (i < SIZE - 1): 중간 구분선 출력 여부

[반복문] 
- for문 2개 (중첩)
  - 외부 for문: i = 0; i < SIZE; i++ (행 처리)
  - 내부 for문: j = 0; j < SIZE; j++ (열 처리)

[특이사항]
- system("cls") 사용으로 화면 지우기 (Windows 전용)
- 게임 보드를 시각적으로 표현하는 UI 담당

===========================================
7. main() 함수 - main.c
===========================================
[함수 인자값] 
- 없음

[함수 리턴값] 
- int형, 0 (정상 종료)

[변수] 
- userInput: char형, 사용자 입력 문자
- isGameRunning: bool형, true 또는 false

[제어문] 
- if문 2개
  - if (userInput >= 'A' && userInput <= 'Z'): 대문자를 소문자로 변환
  - 각 case 내부의 if문들: moveTiles() 결과 및 checkGameOver() 결과 확인
- switch문 1개: userInput에 따른 게임 동작 분기

[반복문] 
- while문 1개: while (isGameRunning) - 메인 게임 루프

[특이사항]
- printBoard() 함수 분리로 코드 가독성 향상
- 각 방향키 처리에서 동일한 패턴 반복 (이동 성공/실패 처리)
- getch() 사용으로 Enter 키 없이 즉시 입력 처리

===========================================

===== 파일별 함수 개수 요약 =====
- initBoard_1313.c: 1개 함수 (initBoard)
- generateTile_1310.c: 1개 함수 (generateTile)
- moveTiles_1315.c: 1개 함수 (moveTiles)
- mergeTiles_1308.c: 1개 함수 (mergeTiles)
- checkGameOver_1310.c: 1개 함수 (checkGameOver)
- printboard_1308.c: 1개 함수 (printBoard)
- main.c: 1개 함수 (main)

총 7개 파일, 7개 함수로 구성
각 파일당 하나의 주요 함수를 담당하는 모듈화된 구조

===========================================
